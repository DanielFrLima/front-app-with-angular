{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nlet CustomerComponent = class CustomerComponent {\n  constructor(service, toastr) {\n    this.service = service;\n    this.toastr = toastr;\n    this.success = false;\n    this.displayedColumns = ['idCustomer', 'firstNameCustomer', 'lastNameCustomer', 'cpfCustomer', 'birthdateCustomer', 'dateCreatedCustomer', 'monthlyIncomeCustomer', 'emailCustomer', 'statusCustomer'];\n    this.ELEMENT_DATA = [];\n    this.dataSource = new MatTableDataSource(this.ELEMENT_DATA);\n    this.customer = {\n      idCustomer: '',\n      firstNameCustomer: '',\n      lastNameCustomer: '',\n      birthdateCustomer: '',\n      dateCreatedCustomer: '',\n      monthlyIncomeCustomer: '',\n      cpfCustomer: '',\n      emailCustomer: '',\n      passwordCustomer: '',\n      statusCustomer: true\n    };\n  }\n  ngOnInit() {\n    this.listCustomer();\n  }\n  saveCustomer() {\n    const datePipe = new DatePipe('en-US');\n    this.customer.birthdateCustomer = datePipe.transform(this.customer.birthdateCustomer, 'dd/MM/yyyy');\n    this.service.save(this.customer).subscribe({\n      next: response => {\n        this.success = true;\n        this.errors = [];\n        this.listCustomer();\n        //this.toast.success('O cliente '+ this.customer.firstNameCustomer +' '+ this.customer.lastNameCustomer +' foi cadastrado com sucesso!', 'Sucesso!!!');      \n      },\n      error: ex => {\n        if (ex.error.errors) {\n          this.errors = ex.error.errors;\n          this.success = false;\n          ex.error.errors.forEach(element => {\n            //this.toast.error(element.message, 'Atenção!!!');                    \n          });\n        } else {\n          this.success = false;\n          this.errors = ex.error.errors;\n          //this.toast.error(ex.error.message, 'Atenção!');\n        }\n      }\n    });\n  }\n\n  listCustomer() {\n    this.service.list().subscribe(response => {\n      this.ELEMENT_DATA = response.result; // Verifique o tipo e faça a conversão\n      this.dataSource = new MatTableDataSource(this.ELEMENT_DATA);\n      this.dataSource.paginator = this.paginator;\n    });\n    deleteCustomer(this.customer, Cus);\n    {\n      this.CustomerService.deleteCustomer(this.customer.idCustomer).subscribe(() => {\n        this.listCustomer();\n        this.toastr.success('Cliente excluido com sucesso!', 'Sucesso');\n      }, error => {\n        this.toastr.error('Ocorreu um erro ao exluir o cliente.', 'Erro');\n      });\n    }\n  }\n};\n__decorate([ViewChild(MatPaginator)], CustomerComponent.prototype, \"paginator\", void 0);\nCustomerComponent = __decorate([Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.css']\n})], CustomerComponent);\nexport { CustomerComponent };\nfunction deleteCustomer(customer, Customer) {\n  throw new Error('Function not implemented.');\n}","map":{"version":3,"mappings":"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","names":["Component","ViewChild","DatePipe","MatTableDataSource","MatPaginator","CustomerComponent","constructor","service","toastr","ELEMENT_DATA","idCustomer","firstNameCustomer","lastNameCustomer","birthdateCustomer","dateCreatedCustomer","monthlyIncomeCustomer","cpfCustomer","emailCustomer","passwordCustomer","statusCustomer","ngOnInit","listCustomer","saveCustomer","datePipe","customer","transform","save","subscribe","next","response","success","errors","error","ex","forEach","element","list","result","dataSource","paginator","deleteCustomer","Cus","CustomerService","__decorate","selector","templateUrl","styleUrls","Customer","Error"],"sourceRoot":"","sources":["D:\\Fatec\\6º Semenstre\\SpreingProjets\\AngularProjects\\front-app-with-angular\\src\\app\\customer\\customer.component.ts"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\r\nimport { CustomerService } from '../service/customer.service';\r\nimport { Customer } from '../model/customer';\r\nimport { DatePipe } from '@angular/common';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\n\r\n\r\n@Component({\r\n  selector: 'app-customer',\r\n  templateUrl: './customer.component.html',\r\n  styleUrls: ['./customer.component.css']\r\n})\r\nexport class CustomerComponent {  \r\n\r\n  success: boolean = false;\r\n  errors!: String[];\r\n  displayedColumns: string[] = ['idCustomer', 'firstNameCustomer', 'lastNameCustomer', 'cpfCustomer', 'birthdateCustomer', 'dateCreatedCustomer', 'monthlyIncomeCustomer', 'emailCustomer', 'statusCustomer'];\r\n  ELEMENT_DATA: Customer[] = [];\r\n  dataSource = new MatTableDataSource<Customer>(this.ELEMENT_DATA);\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  CustomerService: any;\r\n\r\n  constructor(private service: CustomerService, private toastr: ToastrService){\r\n  }\r\n\r\n  ngOnInit(): void {\r\n   this.listCustomer(); \r\n  }\r\n\r\n  customer: Customer = {\r\n    idCustomer: '',\r\n    firstNameCustomer: '',\r\n    lastNameCustomer: '',\r\n    birthdateCustomer: '',\r\n    dateCreatedCustomer: '',\r\n    monthlyIncomeCustomer: '',\r\n    cpfCustomer: '',\r\n    emailCustomer: '',\r\n    passwordCustomer: '',\r\n    statusCustomer: true\r\n  }\r\n\r\n  saveCustomer() {\r\n    const datePipe = new DatePipe('en-US');\r\n    this.customer.birthdateCustomer = datePipe.transform(\r\n      this.customer.birthdateCustomer, 'dd/MM/yyyy');\r\n    \r\n    this.service.save(this.customer).subscribe({next: response => {\r\n      this.success = true;\r\n      this.errors = [];\r\n      this.listCustomer();\r\n    //this.toast.success('O cliente '+ this.customer.firstNameCustomer +' '+ this.customer.lastNameCustomer +' foi cadastrado com sucesso!', 'Sucesso!!!');      \r\n    }, error: ex => {\r\n      if (ex.error.errors) {\r\n        this.errors = ex.error.errors;\r\n        this.success = false;\r\n        ex.error.errors.forEach((element:any) => {\r\n          //this.toast.error(element.message, 'Atenção!!!');                    \r\n        });\r\n      } else {\r\n          this.success = false;\r\n          this.errors = ex.error.errors;\r\n        //this.toast.error(ex.error.message, 'Atenção!');\r\n      }\r\n    }})\r\n  }\r\n\r\n  listCustomer() {\r\n    this.service.list().subscribe((response: any) => {\r\n      this.ELEMENT_DATA = response.result as Customer[]; // Verifique o tipo e faça a conversão\r\n      this.dataSource = new MatTableDataSource<Customer>(this.ELEMENT_DATA);\r\n      this.dataSource.paginator = this.paginator;\r\n    });\r\n\r\n    deleteCustomer(this.customer, Cus); {\r\n      this.CustomerService.deleteCustomer(this.customer.idCustomer).subscribe(\r\n        () => { \r\n          this.listCustomer();\r\n          this.toastr.success('Cliente excluido com sucesso!', 'Sucesso');\r\n        }, error => {\r\n          this.toastr.error('Ocorreu um erro ao exluir o cliente.', 'Erro')\r\n        }\r\n      );\r\n    }\r\n    \r\n  }\r\n\r\n  \r\n}\r\n\r\nfunction deleteCustomer(customer: any, Customer: any) {\r\n  throw new Error('Function not implemented.');\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}